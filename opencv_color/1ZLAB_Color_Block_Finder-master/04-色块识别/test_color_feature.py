# -*- coding: utf-8 -*- 

# 颜色特征识别测试代码

import numpy as np
import cv2
# import color_feature



def color_block_finder(img, lowerb, upperb, 
    min_w=0, max_w=None, min_h=0, max_h=None):
    '''
    色块识别 返回矩形信息
    '''
    # 转换色彩空间 HSV
    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    # 根据颜色阈值转换为二值化图像
    img_bin = cv2.inRange(img_hsv, lowerb, upperb)

    # 寻找轮廓（只寻找最外侧的色块）
    bimg, contours, hier = cv2.findContours(img_bin, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    # 声明画布 拷贝自img
    canvas = np.copy(img)
    # 外接矩形区域集合
    rects = []

    if max_w is None:
        # 如果最大宽度没有设定，就设定为图像的宽度
        max_w = img.shape[1]
    if max_h is None:
        # 如果最大高度没有设定，就设定为图像的高度
        max_h = img.shape[0]
        
    # 遍历所有的边缘轮廓集合
    for cidx,cnt in enumerate(contours):
        # 获取联通域的外界矩形
        (x, y, w, h) = cv2.boundingRect(cnt)

        if w >= min_w and w <= max_w and h >= min_h and h <= max_h:
            # 将矩形的信息(tuple)添加到rects中
            rects.append((x, y, w, h))
    return rects

def draw_color_block_rect(img, rects,color=(0, 0, 255)):
    '''
    绘制色块的矩形区域
    '''
    # 声明画布(canvas) 拷贝自img
    canvas = np.copy(img)
    # 遍历矩形区域
    for rect in rects:
        (x, y, w, h) = rect
        # 在画布上绘制矩形区域（红框）
        cv2.rectangle(canvas, pt1=(x, y), pt2=(x+w, y+h),color=color, thickness=3)
    
    return canvas



# def test_color_block_finder_01():
    
    # 色块识别测试样例1 从图片中读取并且识别
    
# 图片路径
img_path = "demo-pic.png"
# 颜色阈值下界(HSV) lower boudnary
lowerb = (96, 210, 85) 
# 颜色阈值上界(HSV) upper boundary
upperb = (114, 255, 231)

# 读入素材图片 BGR
img = cv2.imread(img_path, cv2.IMREAD_COLOR)


# 检查图片是否读取成功
# if img is None:
#     print("Error: 请检查图片文件路径")
#     exit(1)

# 识别色块 获取矩形区域数组
rects = color_block_finder(img, lowerb, upperb)  #到这里就错了

# 绘制色块的矩形区域
# canvas = color_feature.draw_color_block_rect(img, rects)
# 在HighGUI窗口 展示最终结果
# cv2.namedWindow('result', flags=cv2.WINDOW_NORMAL | cv2.WINDOW_FREERATIO)
# cv2.imshow('result', canvas)

# 等待任意按键按下
# cv2.waitKey(0)
# 关闭其他窗口
# cv2.destroyAllWindows()

# def test_color_block_finder_02():
#     '''
#     色块识别测试样例2 从视频流中读取并且识别
#     '''
#     # 视频路径
#     video_path = 'demo-video.mkv'
#     # 颜色阈值下界(HSV) lower boudnary
#     lowerb = (96, 210, 85) 
#     # 颜色阈值上界(HSV) upper boundary
#     upperb = (114, 255, 231)

    
#     # 读入视频流
#     cap = cv2.VideoCapture(video_path)
#     # 色块识别结果展示
#     cv2.namedWindow('result', flags=cv2.WINDOW_NORMAL | cv2.WINDOW_FREERATIO)

#     while(True):
#         # 逐帧获取画面
#         # ret ？ 画面是否获取成功
#         ret, frame = cap.read()
        
#         if ret:
#             img = frame
#             # 识别色块 获取矩形区域数组
#             # 同时设定最小高度还有宽度，过滤噪声
#             rects = color_block_finder(img, lowerb, upperb,min_w=10,min_h=10)
#             # 绘制色块的矩形区域
#             canvas = draw_color_block_rect(img, rects)
#             # 在HighGUI窗口 展示最终结果 更新画面
#             cv2.imshow('result', canvas)

#         else:
#             print("视频读取完毕或者视频路径异常")
#             break

#         # 这里做一下适当的延迟，每帧延时0.1s钟
#         if cv2.waitKey(50) & 0xFF == ord('q'):
#             break

#     # 释放资源
#     cap.release()
#     cv2.destroyAllWindows()


# if __name__ == "__main__":
    # 测试图片色块识别
    # test_color_block_finder_01()
    # 测试视频流色块识别
    # test_color_block_finder_02()
